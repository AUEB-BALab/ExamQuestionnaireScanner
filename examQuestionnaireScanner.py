import argparse
import logging
import os
from pathlib import Path
import subprocess


def execute_FormScanner(formScanner_path, formScanner_template_path, imagesDirectory_path, outputCSV_path):
    logging.info('''## Scanning images with FormScanner ##
        - Using template :: {}'''
        .format(formScanner_template_path))

    formscanner_command = ['java',
                            '-jar',
                            formScanner_path,
                            formScanner_template_path,
                            imagesDirectory_path,
                            outputCSV_path]
    logging.debug("Prepared FormScanner command :: {}".format(' '.join(formscanner_command)))
    subprocess.call(formscanner_command)

    logging.info("FormScanner execution Finished.\n")


def execute_PdfToPngConverter(pdfDirecoty_path, outputImagesDir_path):
    logging.info('''## Converting scanned pdf to images ##
        - PDF directory :: {}
        - Output images directory :: {}'''
        .format(pdfDirecoty_path, outputImagesDir_path))

    pdf_file_list = os.listdir(pdfDirecoty_path)
    for pdf in pdf_file_list:
        if Path(pdf).suffix == ".pdf":
            pdf_file_path = os.path.join(pdfDirecoty_path, pdf)
            scanned_image_path = os.path.join(outputImagesDir_path, pdf)
            logging.info("\t- Converting pdf :: {}".format(pdf_file_path))
            convert_command = ['convert',
                                "-density","100",
                                pdf_file_path,
                                "-resize", "594x841",
                                (scanned_image_path + "_converted.png")]
            logging.debug("Prepared convert command :: {}".format(' '.join(convert_command)))
            subprocess.call(convert_command)
        else:
            logging.debug("File {} is not a PDF and will not be converted.".format(pdf))

    logging.info("Conversion finished.\n")


# TODO: Replace the subprocess call with a proper python inclusion when the CSVparser script is ready
def execute_CsvParser(inputCSV_path, outputCSV_path, students_csv):
    logging.info('''## Parsing FormScanner csv ##
        - CSV location :: {}
        - Course info xsls :: {}
        - Output CSV location :: {}'''
        .format(inputCSV_path, outputCSV_path, students_csv))

    parse_command = ["python",
                    "CSVparser.py",
                    (inputCSV_path + ".csv"),
                    outputCSV_path,
                    students_csv]
    logging.debug("Prepared parse command :: {}".format(' '.join(parse_command)))
    subprocess.call(parse_command)

    logging.info("Parsing FormScanner CSV finished.\n")


def read_arguments():
    parser = argparse.ArgumentParser()

    parser.add_argument("scanned_pdf_directory",
        help="The directory path that contains the pdf files generated by scanning the grade sheets.")
    parser.add_argument("formScanner_template_xml",
        help="The path for the FormScanner template XTMPL file.")
    parser.add_argument("students_info",
        help="The path for the csv file that contains the student ids.")
    parser.add_argument("-f", "--output_form_scanner_csv",
        help="The path for the csv file produced by FormScanner. The default will be used if not set by the user.")
    parser.add_argument("-s", "--skip_pdf_conversion", action='store_true',
        help="A flag for skipping the pdf-to-images conversion")
    parser.add_argument("-j", "--form_scanner_path",
        help="The file path of the formscanner-main-XXX.jar executable. The default will be used if not set by the user.")
    parser.add_argument("-o", "--final_grades_output_csv_file_path",
        help="The parsed csv file. The default will be used if not set by the user.")
    args = parser.parse_args()

    return args


def parse_arguments(scanned_pdf_directory, output_form_scanner_csv,
    form_scanner_path, formScanner_template_xml, final_grades_output_csv_filepath,
    students_info, skip_pdf_conversion):

    # initialize path variables
    if scanned_pdf_directory:
        scanned_pdf_directory_path = scanned_pdf_directory
        logging.debug("Scanned PDF directory :: {}".format(scanned_pdf_directory_path))
    else:
        logging.warning("Scanned PDF directory no set.")

    scanned_images_directory_path = "tmp" # set the default path
    logging.debug("Scanned images directory :: {}".format(scanned_images_directory_path))

    # set the output formScannerCSV path
    if output_form_scanner_csv:
        output_form_scanner_csv_path = output_form_scanner_csv
    else:
        output_form_scanner_csv_path = os.path.join("tmp","formScannerCSV")
    logging.debug("Output FormScanner csv :: {}".format(output_form_scanner_csv_path))

    # set the FormScanner executable file path
    # TODO: it should check if the executable exists. If not raise an Exception and exit.
    if form_scanner_path:
        formScannerJar_path = form_scanner_path
    else:
        formScannerJar_path = os.path.join("lib","formscanner-main-1.1.3.jar")
    logging.debug("FormScanner executable :: {}".format(formScannerJar_path))

    # set the FromScanner xml template file path
    if not os.path.isfile(formScanner_template_xml):
        logging.error("File {} does not exist".format(formScanner_template_xml))
        raise FileNotFoundError
    elif Path(formScanner_template_xml).suffix != ".xtmpl":
        logging.error("File {} is not an XTMPL. Please provide a proper template file.".format(formScanner_template_xml))
        raise FileNotFoundError
    else:
        logging.debug("FormScanner XTMPL template :: {}".format(formScanner_template_xml))

    # set the parsed output csv file path
    if final_grades_output_csv_filepath:
        final_grades_output_csv_file_path = final_grades_output_csv_filepath
    else:
        final_grades_output_csv_file_path = os.path.join("./", "final_grades.csv")
    logging.debug("Final grades CSV :: {}".format(final_grades_output_csv_file_path))

    # set the exam sheets file path
    if not os.path.isfile(students_info):
        logging.error("File {} does not exist".format(students_info))
        raise FileNotFoundError
    else:
        logging.debug("Student details CSV :: {}".format(students_info))

    logging.debug("PDF conversion is set to :: {}".format(skip_pdf_conversion))

    return scanned_pdf_directory_path, scanned_images_directory_path, \
    output_form_scanner_csv_path, \
    formScannerJar_path, formScanner_template_xml, \
    final_grades_output_csv_file_path, students_info


if __name__ == '__main__':
    logging.getLogger().setLevel(logging.DEBUG)
    logging.info("Executing script as standalone")

    args = read_arguments()
    skip_pdf_conversion = True if args.skip_pdf_conversion else False
    # Read the command-line arguments
    scanned_pdf_directory_path, scanned_images_directory_path, \
    output_form_scanner_csv_path, formScannerJar_path, formScanner_template_xml_path, \
    final_grades_output_csv_file_path, students_info = parse_arguments(
    args.scanned_pdf_directory, args.output_form_scanner_csv,
    args.form_scanner_path, args.formScanner_template_xml,
    args.final_grades_output_csv_file_path, args.students_info, skip_pdf_conversion)

    if skip_pdf_conversion:
        logging.info("Skipping PDF to image conversion.")
    else:
        execute_PdfToPngConverter(scanned_pdf_directory_path, scanned_images_directory_path)

    execute_FormScanner(formScannerJar_path, formScanner_template_xml_path, scanned_images_directory_path, output_form_scanner_csv_path)
    execute_CsvParser(output_form_scanner_csv_path, final_grades_output_csv_file_path, students_info)
